///////////////////////////////////////////////////////////////////////////////
// Name:        pdffontdescription.h
// Purpose:     
// Author:      Ulrich Telle
// Modified by:
// Created:     2008-08-10
// Copyright:   (c) Ulrich Telle
// Licence:     wxWindows licence
///////////////////////////////////////////////////////////////////////////////

%module{Wx};

%loadplugin{myinc::XSPP::Overload};

%name{Wx::PdfFontDescription} class wxPdfFontDescription
{

%{
static void
wxPdfFontDescription::CLONE()
  CODE:
    wxPli_thread_sv_clone( aTHX_ CLASS, (wxPliCloneSV)wxPli_detach_object );
%}

public :
  /// Default constructor
  %name{newDefault} wxPdfFontDescription() %Overload;
  
  /// Constructor
  /**
  * \param ascent ascender
  * \param descent descender
  * \param capHeight height of capital characters
  * \param flags font flags
  * \param fontBBox bounding box of the font
  * \param italicAngle italic angle
  * \param stemV stemV value
  * \param missingWidth width of missing characters
  * \param xHeight height of character X
  * \param underlinePosition position of underline decoration
  * \param underlineThickness thickness of underline decoration
  */
  %name{newFull} wxPdfFontDescription(int ascent, int descent, int capHeight, int flags,
                       const wxString& fontBBox, int italicAngle, int stemV,
                       int missingWidth, int xHeight,
                       int underlinePosition, int underlineThickness, int lineGap) %Overload;

  /// Copy constructor
  %name{newCopy} wxPdfFontDescription(const wxPdfFontDescription& desc) %Overload;
  
  /// Default destructor
  %name{Destroy} virtual ~wxPdfFontDescription()
        %code%{  wxPli_thread_sv_unregister( aTHX_ wxPli_get_class( aTHX_ ST(0) ), THIS, ST(0) );
		         delete THIS; %};  

  /// Set ascender
  /**
  * \param ascent ascender
  */
  void SetAscent(int ascent);

  /// Get ascender
  /**
  * \return the ascender
  */
  int  GetAscent() const;
  
  /// Set descender
  /**
  * \param descent descender
  */
  void SetDescent(int descent);

  /// Get descender
  /**
  * \return the descender
  */
  int  GetDescent() const;
  
  /// Set CapHeight
  /**
  * \param capHeight the height of capital characters
  */
  void SetCapHeight(int capHeight);

  /// Get CapHeight
  /**
  * \return the height of capital characters
  */
  int  GetCapHeight() const;
  
  /// Set font flags
  /**
  * \param flags the font flags
  */
  void SetFlags(int flags);

  /// Get font flags
  /**
  * \return the font flags
  */
  int  GetFlags() const;
  
  /// Set font bounding box
  /**
  * \param fontBBox the bounding box of the font in string representation
  */
  void SetFontBBox(const wxString& fontBBox);

  /// Get font bounding box
  /**
  * \return the bounding box of the font in string representation
  */
  wxString GetFontBBox() const;
  
  /// Set italic angle
  /**
  * \param italicAngle the italic angle
  */
  void SetItalicAngle(int italicAngle);

  /// Get italic angle
  /**
  * \return the italic angle
  */
  int  GetItalicAngle() const;
  
  /// Set StemV
  /**
  * \param stemV the StemV value
  */
  void SetStemV(int stemV);

  /// Get StemV
  /**
  * \return the StemV value
  */
  int  GetStemV() const;

  /// Set missing character width
  /**
  * \param missingWidth the width of missing characters
  */
  void SetMissingWidth(int missingWidth);

  /// Get missing character width
  /**
  * \return the width of missing characters
  */
  int  GetMissingWidth() const;
  
  /// Set xHeight
  /**
  * \param xHeight the height of the character X
  */
  void SetXHeight(int xHeight);

  /// Get xHeight
  /**
  * \return the height of the character X
  */
  int  GetXHeight() const;
  
  /// Set underline position
  /**
  * \param underlinePosition the position of the underline decoration
  */
  void SetUnderlinePosition(int underlinePosition);

  /// Get underline position
  /**
  * \return the position of the underline decoration
  */
  int  GetUnderlinePosition() const;
  
  /// Set underline thickness
  /**
  * \param underlineThickness the thickness of the underline decoration
  */
  void SetUnderlineThickness(int underlineThickness);

  /// Get underline thickness
  /**
  * \return the thickness of the underline decoration
  */
  int  GetUnderlineThickness() const;
  
  void SetOpenTypeMetrics( int hheaAscender, int hheaDescender, int hheaLineGap,
                                          int os2sTypoAscender, int os2sTypoDescender, int os2sTypoLineGap,
                                          int os2usWinAscent, int os2usWinDescent);

  /// Get OpenType Font Metrics
  /**
  * \Get stored font metrics from the font hhea and os2 tables
  */
  
%{

void
wxPdfFontDescription::GetOpenTypeMetrics()
  PREINIT:
    int hheaAscender, hheaDescender, hheaLineGap, os2sTypoAscender, os2sTypoDescender, os2sTypoLineGap, os2usWinAscent, os2usWinDescent;
  PPCODE:
    THIS->GetOpenTypeMetrics( &hheaAscender, &hheaDescender, &hheaLineGap, &os2sTypoAscender, &os2sTypoDescender, &os2sTypoLineGap, &os2usWinAscent, &os2usWinDescent );
    EXTEND( SP, 8 );
    PUSHs( sv_2mortal( newSViv( hheaAscender ) ) );
    PUSHs( sv_2mortal( newSViv( hheaDescender ) ) );
    PUSHs( sv_2mortal( newSViv( hheaLineGap ) ) );
    PUSHs( sv_2mortal( newSViv( os2sTypoAscender ) ) );
    PUSHs( sv_2mortal( newSViv( os2sTypoDescender ) ) );
    PUSHs( sv_2mortal( newSViv( os2sTypoLineGap ) ) );
    PUSHs( sv_2mortal( newSViv( os2usWinAscent ) ) );
    PUSHs( sv_2mortal( newSViv( os2usWinDescent ) ) );


%}

};
